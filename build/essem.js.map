{"version":3,"file":"essem.js","sources":["../src/utils/object_pool.ts","../src/utils/misc.ts","../src/ecs/entity.ts","../src/ecs/manager.ts","../src/ecs/scene.ts","../src/core/application.ts","../src/ecs/system.ts","../src/index.ts"],"sourcesContent":["type ObjectPoolCtor<T> = { new (): T };\n\nexport class ObjectPool<T> {\n    ObjectClass: ObjectPoolCtor<T>;\n    availiable: T[] = [];\n    totalObjects = 0;\n\n    constructor(ObjectClass: ObjectPoolCtor<T>, count: number) {\n        this.ObjectClass = ObjectClass;\n        this.reserve(count);\n    }\n\n    acquire(): T {\n        // check if pool is empty\n        if (this.availiable.length === 0) {\n            // expand by 20% or minimum 1\n            const toExpand = Math.round(this.totalObjects * 1.2) + 1;\n            this.reserve(toExpand);\n        }\n\n        const object = this.availiable.shift() as T;\n        return object;\n    }\n\n    release(object: T): void {\n        this.availiable.push(object);\n    }\n\n    reserve(count: number): void {\n        for (let i = 0; i < count; i++) {\n            const object = new this.ObjectClass();\n            this.availiable.push(object);\n        }\n\n        this.totalObjects += count;\n    }\n}\n","export class AssertionError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = \"AssertionError\";\n    }\n}\n\nexport function assert(condition: boolean, message?: string): asserts condition {\n    if (!condition) throw new AssertionError(message);\n}\n","import { Component, Manager } from \"./manager\";\nimport { assert } from \"../utils/misc\";\nimport { AnyCtor } from \"../utils/types\";\n\nexport class Entity {\n    id: number;\n    destroyed: boolean = false;\n\n    componentMap: Map<string, Component>;\n\n    // @ts-ignore\n    private _manager: Manager;\n\n    constructor() {\n        this.componentMap = new Map();\n    }\n\n    addComponent(component: Component): Component {\n        const typeName = component.constructor.name;\n        const entitySet = this._manager.getEntityIDSet(typeName);\n        assert(!this.componentMap.has(typeName), `Component '${typeName}' already exists!`);\n\n        this.componentMap.set(typeName, component);\n        entitySet.add(this);\n        this._manager.notifySystemEntityChange();\n        return component;\n    }\n\n    removeComponent<T extends Component>(componentType: AnyCtor<T> | string): void {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        const entitySet = this._manager.getEntityIDSet(typeName);\n        assert(this.componentMap.has(typeName), `Component '${typeName}' does not exist!`);\n\n        this.componentMap.delete(typeName);\n        entitySet.delete(this);\n        this._manager.notifySystemEntityChange();\n    }\n\n    hasComponent<T extends Component>(componentType: AnyCtor<T> | string): boolean {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        return this.componentMap.has(typeName);\n    }\n\n    getComponent<T extends Component>(componentType: AnyCtor<T> | string): T {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        const component = this.componentMap.get(typeName);\n        assert(component !== undefined, `Component '${typeName}' does not exist!`);\n        return component as T;\n    }\n\n    destroy(): void {\n        if (this.destroyed) return;\n\n        for (const [typeName] of this.componentMap) {\n            const entitySet = this._manager.getEntityIDSet(typeName);\n\n            this.componentMap.delete(typeName);\n            entitySet.delete(this);\n        }\n\n        this._manager.notifySystemEntityChange();\n        this.destroyed = true;\n    }\n\n    _setup(): void {\n        if (!this.destroyed) return;\n\n        this.destroyed = false;\n    }\n}\n","import { ObjectPool } from \"../utils/object_pool\";\nimport { Entity } from \"./entity\";\nimport { assert } from \"../utils/misc\";\nimport { AnyCtor } from \"../utils/types\";\nimport { System } from \"./system\";\n\n// basically any object\nexport type Component = Record<string, unknown>;\n\nexport class Manager {\n    managerEntity: typeof Entity = class extends Entity {};\n\n    entityPool: ObjectPool<Entity>;\n    componentToEntityIDsMap: Map<string, Set<Entity>>;\n    systems: System[] = [];\n\n    constructor() {\n        this.managerEntity.prototype[\"_manager\"] = this;\n        this.entityPool = new ObjectPool(this.managerEntity, 100);\n        this.componentToEntityIDsMap = new Map();\n    }\n\n    registerComponent<T extends Component>(componentClass: AnyCtor<T>): void {\n        const typeName = componentClass.name;\n        assert(\n            !this.componentToEntityIDsMap.has(typeName),\n            `Component '${typeName}' is already registered!`\n        );\n        this.componentToEntityIDsMap.set(typeName, new Set());\n    }\n\n    registerSystem<T extends System>(systemClass: { new (manager: Manager): T }): void {\n        const system = new systemClass(this);\n        system.onInit();\n        this.systems.push(system);\n    }\n\n    runSystems(delta: number) {\n        for (const system of this.systems) {\n            system.onUpdate(delta);\n        }\n    }\n\n    createEntity(): Entity {\n        return this.entityPool.acquire();\n    }\n\n    destroyEntity(entity: Entity): void {\n        entity.destroy();\n        this.entityPool.release(entity);\n        this.notifySystemEntityChange();\n    }\n\n    getEntityIDSet(typeName: string): Set<Entity> {\n        const entitySet = this.componentToEntityIDsMap.get(typeName);\n        assert(entitySet !== undefined, `Component '${typeName}' has not been registered!`);\n        return entitySet;\n    }\n\n    notifySystemEntityChange(): void {\n        for (const system of this.systems) {\n            system[\"_entityGetCache\"] = null;\n        }\n    }\n}\n","import { Entity } from \"./entity\";\nimport { Manager } from \"./manager\";\n\nexport class Scene {\n    private _manager: Manager;\n\n    constructor(manager: Manager) {\n        this._manager = manager;\n    }\n\n    createEntity(): Entity {\n        return this._manager.createEntity();\n    }\n\n    destroyEntity(entity: Entity): void {\n        this._manager.destroyEntity(entity);\n    }\n}\n","import { Component, Manager } from \"../ecs/manager\";\nimport { Scene } from \"../ecs/scene\";\nimport { System } from \"../ecs/system\";\nimport { AnyCtor } from \"../utils/types\";\n\nexport class Application {\n    private _manager: Manager;\n\n    lastFrameTime = 0;\n    running = true;\n\n    constructor() {\n        this._manager = new Manager();\n\n        window.addEventListener(\"load\", () => {\n            const loop = () => {\n                if (this.running) {\n                    this._onUpdate();\n                    requestAnimationFrame(loop);\n                }\n            };\n\n            requestAnimationFrame(loop);\n        });\n    }\n\n    private _onUpdate() {\n        const now = performance.now();\n        const delta = now - this.lastFrameTime;\n\n        this._manager.runSystems(delta);\n\n        this.lastFrameTime = now;\n    }\n\n    shutdown(): void {\n        this.running = false;\n    }\n\n    registerComponent<T extends Component>(componentClass: AnyCtor<T>): Application {\n        this._manager.registerComponent(componentClass);\n        return this;\n    }\n\n    registerSystem<T extends System>(systemClass: { new (manager: Manager): T }): Application {\n        this._manager.registerSystem(systemClass);\n        return this;\n    }\n\n    createScene(): Scene {\n        const scene = new Scene(this._manager);\n        return scene;\n    }\n}\n","import { Component, Manager } from \"./manager\";\nimport { AnyCtor } from \"../utils/types\";\nimport { Entity } from \"./entity\";\nimport { assert } from \"../utils/misc\";\n\nexport abstract class System {\n    typeNames: string[];\n    private _manager: Manager;\n    private _entityGetCache: Entity[] | null;\n\n    constructor(manager: Manager) {\n        this._manager = manager;\n    }\n\n    abstract onInit(): void;\n    abstract onUpdate(delta: number): void;\n\n    setComponentTypes(componentTypes: AnyCtor<Component>[] | string[]): void {\n        this.typeNames = [];\n        for (const componentType of componentTypes) {\n            const typeName = (componentType as AnyCtor<Component>).name ?? componentType;\n            assert(\n                this._manager.componentToEntityIDsMap.has(typeName),\n                `Component '${typeName}' has not been registered!`\n            );\n            this.typeNames.push(typeName);\n        }\n    }\n\n    getEntities(): Entity[] {\n        if (this._entityGetCache !== null) return this._entityGetCache;\n\n        this._entityGetCache = [];\n        for (const typeName of this.typeNames) {\n            const entitySet = this._manager.componentToEntityIDsMap.get(typeName) as Set<Entity>;\n            this._entityGetCache.push(...entitySet);\n        }\n\n        return this._entityGetCache;\n    }\n}\n","export * from \"./core/application\";\n\nexport * from \"./ecs/entity\";\nexport * from \"./ecs/manager\";\nexport * from \"./ecs/scene\";\nexport * from \"./ecs/system\";\n\nexport * from \"./utils/misc\";\nexport * from \"./utils/object_pool\";\n\nexport const VERSION = \"$_VERSION\";\n"],"names":[],"mappings":"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"}