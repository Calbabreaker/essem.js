{"version":3,"file":"essem.min.js","sources":["../src/utils/object_pool.ts","../src/utils/misc.ts","../src/ecs/entity.ts","../src/ecs/manager.ts","../src/ecs/scene.ts","../src/core/application.ts","../src/ecs/system.ts","../src/index.ts"],"sourcesContent":["type ObjectPoolCtor<T> = { new (): T };\n\nexport class ObjectPool<T> {\n    ObjectClass: ObjectPoolCtor<T>;\n    availiable: T[] = [];\n    totalObjects = 0;\n\n    constructor(ObjectClass: ObjectPoolCtor<T>, count: number) {\n        this.ObjectClass = ObjectClass;\n        this.reserve(count);\n    }\n\n    acquire(): T {\n        // check if pool is empty\n        if (this.availiable.length === 0) {\n            // expand by 20% or minimum 1\n            const toExpand = Math.round(this.totalObjects * 1.2) + 1;\n            this.reserve(toExpand);\n        }\n\n        const object = this.availiable.shift() as T;\n        return object;\n    }\n\n    release(object: T): void {\n        this.availiable.push(object);\n    }\n\n    reserve(count: number): void {\n        for (let i = 0; i < count; i++) {\n            const object = new this.ObjectClass();\n            this.availiable.push(object);\n        }\n\n        this.totalObjects += count;\n    }\n}\n","export class AssertionError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = \"AssertionError\";\n    }\n}\n\nexport function assert(condition: boolean, message?: string): asserts condition {\n    if (!condition) throw new AssertionError(message);\n}\n","import { Component, Manager } from \"./manager\";\nimport { assert } from \"../utils/misc\";\nimport { AnyCtor } from \"../utils/types\";\n\nexport class Entity {\n    id: number;\n    destroyed: boolean = false;\n\n    componentMap: Map<string, Component>;\n\n    // @ts-ignore\n    private _manager: Manager;\n\n    constructor() {\n        this.componentMap = new Map();\n    }\n\n    addComponent(component: Component): Component {\n        const typeName = component.constructor.name;\n        const entitySet = this._manager.getEntityIDSet(typeName);\n        assert(!this.componentMap.has(typeName), `Component '${typeName}' already exists!`);\n\n        this.componentMap.set(typeName, component);\n        entitySet.add(this);\n        this._manager.notifySystemEntityChange();\n        return component;\n    }\n\n    removeComponent<T extends Component>(componentType: AnyCtor<T> | string): void {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        const entitySet = this._manager.getEntityIDSet(typeName);\n        assert(this.componentMap.has(typeName), `Component '${typeName}' does not exist!`);\n\n        this.componentMap.delete(typeName);\n        entitySet.delete(this);\n        this._manager.notifySystemEntityChange();\n    }\n\n    hasComponent<T extends Component>(componentType: AnyCtor<T> | string): boolean {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        return this.componentMap.has(typeName);\n    }\n\n    getComponent<T extends Component>(componentType: AnyCtor<T> | string): T {\n        const typeName = (componentType as AnyCtor<T>).name ?? componentType;\n        const component = this.componentMap.get(typeName);\n        assert(component !== undefined, `Component '${typeName}' does not exist!`);\n        return component as T;\n    }\n\n    destroy(): void {\n        if (this.destroyed) return;\n\n        for (const [typeName] of this.componentMap) {\n            const entitySet = this._manager.getEntityIDSet(typeName);\n\n            this.componentMap.delete(typeName);\n            entitySet.delete(this);\n        }\n\n        this._manager.notifySystemEntityChange();\n        this.destroyed = true;\n    }\n\n    _setup(): void {\n        if (!this.destroyed) return;\n\n        this.destroyed = false;\n    }\n}\n","import { ObjectPool } from \"../utils/object_pool\";\nimport { Entity } from \"./entity\";\nimport { assert } from \"../utils/misc\";\nimport { AnyCtor } from \"../utils/types\";\nimport { System } from \"./system\";\n\n// basically any object\nexport type Component = Record<string, unknown>;\n\nexport class Manager {\n    managerEntity: typeof Entity = class extends Entity {};\n\n    entityPool: ObjectPool<Entity>;\n    componentToEntityIDsMap: Map<string, Set<Entity>>;\n    systems: System[] = [];\n\n    constructor() {\n        this.managerEntity.prototype[\"_manager\"] = this;\n        this.entityPool = new ObjectPool(this.managerEntity, 100);\n        this.componentToEntityIDsMap = new Map();\n    }\n\n    registerComponent<T extends Component>(componentClass: AnyCtor<T>): void {\n        const typeName = componentClass.name;\n        assert(\n            !this.componentToEntityIDsMap.has(typeName),\n            `Component '${typeName}' is already registered!`\n        );\n        this.componentToEntityIDsMap.set(typeName, new Set());\n    }\n\n    registerSystem<T extends System>(systemClass: { new (manager: Manager): T }): void {\n        const system = new systemClass(this);\n        system.onInit();\n        this.systems.push(system);\n    }\n\n    runSystems(delta: number) {\n        for (const system of this.systems) {\n            system.onUpdate(delta);\n        }\n    }\n\n    createEntity(): Entity {\n        return this.entityPool.acquire();\n    }\n\n    destroyEntity(entity: Entity): void {\n        entity.destroy();\n        this.entityPool.release(entity);\n        this.notifySystemEntityChange();\n    }\n\n    getEntityIDSet(typeName: string): Set<Entity> {\n        const entitySet = this.componentToEntityIDsMap.get(typeName);\n        assert(entitySet !== undefined, `Component '${typeName}' has not been registered!`);\n        return entitySet;\n    }\n\n    notifySystemEntityChange(): void {\n        for (const system of this.systems) {\n            system[\"_entityGetCache\"] = null;\n        }\n    }\n}\n","import { Entity } from \"./entity\";\nimport { Manager } from \"./manager\";\n\nexport class Scene {\n    private _manager: Manager;\n\n    constructor(manager: Manager) {\n        this._manager = manager;\n    }\n\n    createEntity(): Entity {\n        return this._manager.createEntity();\n    }\n\n    destroyEntity(entity: Entity): void {\n        this._manager.destroyEntity(entity);\n    }\n}\n","import { Component, Manager } from \"../ecs/manager\";\nimport { Scene } from \"../ecs/scene\";\nimport { System } from \"../ecs/system\";\nimport { AnyCtor } from \"../utils/types\";\n\nexport class Application {\n    private _manager: Manager;\n\n    lastFrameTime: number = 0;\n    running: boolean = true;\n\n    constructor() {\n        this._manager = new Manager();\n\n        window.addEventListener(\"load\", () => {\n            const loop = () => {\n                if (this.running) {\n                    this._onUpdate();\n                    requestAnimationFrame(loop);\n                }\n            };\n\n            requestAnimationFrame(loop);\n        });\n    }\n\n    private _onUpdate() {\n        const now = performance.now();\n        const delta = now - this.lastFrameTime;\n\n        this._manager.runSystems(delta);\n\n        this.lastFrameTime = now;\n    }\n\n    shutdown() {\n        this.running = false;\n    }\n\n    registerComponent<T extends Component>(componentClass: AnyCtor<T>): Application {\n        this._manager.registerComponent(componentClass);\n        return this;\n    }\n\n    registerSystem<T extends System>(systemClass: { new (manager: Manager): T }): Application {\n        this._manager.registerSystem(systemClass);\n        return this;\n    }\n\n    createScene(): Scene {\n        const scene = new Scene(this._manager);\n        return scene;\n    }\n}\n","import { Component, Manager } from \"./manager\";\nimport { AnyCtor } from \"../utils/types\";\nimport { Entity } from \"./entity\";\nimport { assert } from \"../utils/misc\";\n\nexport abstract class System {\n    typeNames: string[];\n    private _manager: Manager;\n    private _entityGetCache: Entity[] | null;\n\n    constructor(manager: Manager) {\n        this._manager = manager;\n    }\n\n    abstract onInit(): void;\n    abstract onUpdate(delta: number): void;\n\n    setComponentTypes(componentTypes: AnyCtor<Component>[] | string[]): void {\n        this.typeNames = [];\n        for (const componentType of componentTypes) {\n            const typeName = (componentType as AnyCtor<Component>).name ?? componentType;\n            assert(\n                this._manager.componentToEntityIDsMap.has(typeName),\n                `Component '${typeName}' has not been registered!`\n            );\n            this.typeNames.push(typeName);\n        }\n    }\n\n    getEntities(): Entity[] {\n        if (this._entityGetCache !== null) return this._entityGetCache;\n\n        this._entityGetCache = [];\n        for (const typeName of this.typeNames) {\n            const entitySet = this._manager.componentToEntityIDsMap.get(typeName) as Set<Entity>;\n            this._entityGetCache.push(...entitySet);\n        }\n\n        return this._entityGetCache;\n    }\n}\n","export * from \"./core/application\";\n\nexport * from \"./ecs/entity\";\nexport * from \"./ecs/manager\";\nexport * from \"./ecs/scene\";\nexport * from \"./ecs/system\";\n\nexport * from \"./utils/misc\";\nexport * from \"./utils/object_pool\";\n\nexport const VERSION = \"$_VERSION\";\n"],"names":["ObjectPool","[object Object]","ObjectClass","count","this","reserve","availiable","length","toExpand","Math","round","totalObjects","shift","object","push","i","AssertionError","Error","message","super","name","assert","condition","Entity","componentMap","Map","component","typeName","constructor","entitySet","_manager","getEntityIDSet","has","set","add","notifySystemEntityChange","componentType","delete","get","undefined","destroyed","Manager","managerEntity","prototype","entityPool","componentToEntityIDsMap","componentClass","Set","systemClass","system","onInit","systems","delta","onUpdate","acquire","entity","destroy","release","Scene","manager","createEntity","destroyEntity","window","addEventListener","loop","running","_onUpdate","requestAnimationFrame","now","performance","lastFrameTime","runSystems","registerComponent","registerSystem","componentTypes","typeNames","_entityGetCache"],"mappings":"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"}