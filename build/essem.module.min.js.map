{"version":3,"file":"essem.module.min.js","sources":["../src/utils/misc.ts","../src/utils/browser.ts","../src/utils/colors.ts","../src/renderer/renderer.ts","../src/ecs/entity.ts","../src/utils/object_pool.ts","../src/ecs/scene.ts","../src/math/common.ts","../src/math/vector2.ts","../src/core/event_manager.ts","../src/core/input_events.ts","../src/core/canvas.ts","../src/core/audio_clip.ts","../src/renderer/texture.ts","../src/core/loader.ts","../src/core/application.ts","../src/math/matrix3.ts","../src/ecs/components/camera_component.ts","../src/ecs/components/sprite_component.ts","../src/ecs/components/transform_component.ts","../src/ecs/system.ts","../src/ecs/systems/camera_system.ts","../src/renderer/shader.ts","../src/renderer/vertex_array.ts","../src/renderer/abstract_batch_renderer.ts","../src/ecs/systems/sprite_renderer_system.ts","../src/index.ts"],"sourcesContent":["import { AnyCtor } from \"./types\";\n\n/**\n * Error class that is used for {@link ESSEM.assert}.\n *\n * @memberof ESSEM\n */\nexport class AssertionError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = \"AssertionError\";\n    }\n}\n\n/**\n * Throws an error if condition is false.\n * All uses if this in the essem.js code will get removed in minified files.\n *\n * @memberof ESSEM\n * @param condition - The condition to assert.\n * @param message - The message to use in the Error.\n * @return {void}\n */\nexport function assert(condition: boolean, message?: string): asserts condition {\n    if (!condition) throw new AssertionError(message);\n}\n\n/**\n * Gets an item from the map using a key and sets it with a new instance of the class of it\n * doesn't  exist.\n *\n * @param map - The map to use.\n * @param key - The key of the item.\n * @param defaultClass - The class to create a new instance from.\n * @return The value that was retrieved.\n */\nexport function mapGet<K, V>(map: Map<K, V>, key: K, defaultClass: AnyCtor<V>): V {\n    if (!map.has(key)) map.set(key, new defaultClass());\n    return map.get(key) as V;\n}\n\n/**\n * Removes an item from an array by swapping the last element with the removing element and popping\n * the array.\n *\n * @param array - The array to use.\n * @param index - The index to remove.\n * @return The last item of the array that was swapped to the index.\n */\nexport function lastItemSwapRemove<T>(array: T[], index: number): T {\n    const lastItem = array[array.length - 1];\n    array[index] = lastItem;\n    array.pop();\n    return lastItem;\n}\n\nexport function getTypeName<T>(type: AnyCtor<T> | string): string {\n    return (type as AnyCtor<T>).name ?? type;\n}\n","// caches the result from webgl2Supported function\nlet webgl2Supported: boolean | undefined;\n\n/**\n * Checks to see if WebGL2 is supported in the browser.\n *\n * @memberof ESSEM\n * @return Whether or not WebGL2 is supported.\n */\nexport function isWebGL2Supported(): boolean {\n    if (webgl2Supported === undefined) {\n        const canvasElm = document.createElement(\"canvas\");\n        const gl = canvasElm.getContext(\"webgl2\");\n\n        webgl2Supported = gl !== undefined;\n    }\n\n    return webgl2Supported;\n}\n\nlet saidHello = false;\n\n/**\n * Says hello in essem.js style. Gets called once when the application finishes initiating.\n *\n * @memberof ESSEM\n */\nexport function sayHello(): void {\n    if (!saidHello) {\n        // TODO: make this look better\n        console.log(\"---\\n--- essem.js v$_VERSION\\n---\");\n        saidHello = true;\n    }\n}\n\n/**\n * Skips the essem.js hello message.\n *\n * @memberof ESSEM\n */\nexport function skipHello(): void {\n    saidHello = true;\n}\n","/**\n * Converts hexadecimal number to a rbga array.\n *\n * @memberof ESSEM\n * @param hex - Hexadecimal number. Alpha channel is default to 1.\n * @return RGBA array with values from 0 to 1.\n */\nexport function hexToRGBA(hex: number): Float32Array {\n    const rgb = new Float32Array(4);\n    if (hex <= 0xffffff) {\n        rgb[0] = ((hex >> 16) & 0xff) / 255;\n        rgb[1] = ((hex >> 8) & 0xff) / 255;\n        rgb[2] = (hex & 0xff) / 255;\n        rgb[3] = 1;\n    } else {\n        rgb[0] = ((hex >> 24) & 0xff) / 255;\n        rgb[1] = ((hex >> 16) & 0xff) / 255;\n        rgb[2] = ((hex >> 8) & 0xff) / 255;\n        rgb[3] = (hex & 0xff) / 255;\n    }\n\n    return rgb;\n}\n","import { assert } from \"src/utils/misc\";\nimport { isWebGL2Supported } from \"src/utils/browser\";\nimport { hexToRGBA } from \"src/utils/colors\";\n\nexport class Renderer {\n    readonly gl: WebGL2RenderingContext;\n    readonly maxTextureSlots: number;\n\n    constructor(canvasElement: HTMLCanvasElement) {\n        if (isWebGL2Supported()) {\n            const gl = canvasElement.getContext(\"webgl2\");\n            assert(gl !== null, \"Failed to create WebGL2 context\");\n            this.gl = gl;\n\n            this.maxTextureSlots = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        } else {\n            alert(\"WebGL2 is not supported in your browser!\");\n            throw new Error(\"WebGL2 not supported!\");\n        }\n    }\n\n    update(): void {\n        const gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    set backgroundColor(hexColor: number) {\n        const rgbColor = hexToRGBA(hexColor);\n        this.gl.clearColor(rgbColor[0], rgbColor[1], rgbColor[2], rgbColor[3]);\n    }\n}\n","import { assert, getTypeName } from \"src/utils/misc\";\nimport { AnyCtor } from \"src/utils/types\";\nimport { Scene } from \"./scene\";\n\n// basically any object\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type Component = Object;\nexport type ComponentClass = AnyCtor<Component>;\n\n/**\n * Entity class to handle components in ecs.\n *\n * @memberof ESSEM\n */\nexport class Entity {\n    /**\n     * The child entities of the entity mapped by their name.\n     */\n    children: Map<string, Entity> = new Map();\n\n    /**\n     * Identifier of the entity, only unique to its scene.\n     */\n    readonly id: number;\n\n    // these variables are private and are accessed by getters\n    private _active = false;\n    private _activeSelf = false;\n    private _destroyed = true;\n    private _name = \"\";\n    private _parent: Entity | Scene | null = null;\n\n    _systemIndexMap: Map<string, number> = new Map();\n    _tagIndexMap: Map<string, number> = new Map();\n    private _componentMap: Map<string, Component> = new Map();\n    private _scene: Scene;\n\n    constructor(id: number, scene: Scene) {\n        this.id = id;\n        this._scene = scene;\n    }\n\n    /**\n     * Adds a new component to the entity.\n     *\n     * @param {Component} component - Any object that is an instance of a class. Same named classes\n     *        will be considered as the same component.\n     * @return {Component} The component that was added.\n     */\n    addComponent<T extends Component>(component: T): T {\n        const typeName = component.constructor.name;\n        assert(!this._componentMap.has(typeName), `Component '${typeName}' already exists!`);\n        this._componentMap.set(typeName, component);\n\n        if (this.active) this._scene._entityComponentAdd(this, typeName);\n        return component as T;\n    }\n\n    /**\n     * Removes a component from the entity.\n     *\n     * @param componentType - The component name or class to remove.\n     *        Same named classes will be considered as the same component.\n     */\n    removeComponent(componentType: ComponentClass | string): void {\n        const typeName = getTypeName(componentType);\n        assert(this._componentMap.has(typeName), `Component '${typeName}' does not exist!`);\n\n        if (this.active) this._scene._entityComponentRemove(this, typeName);\n        this._componentMap.delete(typeName);\n    }\n\n    /**\n     * Checks to see if the component is on the entity.\n     *\n     * @param componentType - The component name or class to check.\n     *        Same named classes will be considered as the same component.\n     * @return Whether or not the entity has the component.\n     */\n    hasComponent(componentType: ComponentClass | string): boolean {\n        const typeName = getTypeName(componentType);\n        return this._componentMap.has(typeName);\n    }\n\n    /**\n     * Checks to see if all the components specified are on the entity.\n     *\n     * @param componentType - An array of the component names or classes to check.\n     *        Same named classes will be considered as the same component.\n     * @return Whether or not the entity has all the components.\n     */\n    hasAllComponents(componentTypes: (ComponentClass | string)[]): boolean {\n        for (let i = 0; i < componentTypes.length; i++) {\n            if (!this.hasComponent(componentTypes[i])) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Gets a component from the entity.\n     *\n     * @param {ComponentClass | string} componentType - The component name or class to get.\n     *        Same named classes will be considered as the same component.\n     * @return {Component} The component that was retrieved.\n     */\n    getComponent<T extends Component>(componentType: AnyCtor<T> | string): T {\n        const typeName = getTypeName(componentType);\n        const component = this._componentMap.get(typeName);\n        assert(component !== undefined, `Component '${typeName}' does not exist!`);\n        return component as T;\n    }\n\n    addTag(tag: string): void {\n        if (this.active) {\n            return this._scene._entityTagAdd(this, tag);\n        }\n\n        this._tagIndexMap.set(tag, 0);\n    }\n\n    hasTag(tag: string): boolean {\n        return this._tagIndexMap.has(tag);\n    }\n\n    removeTag(tag: string): void {\n        if (this.active) this._scene._entityTagRemove(this, tag);\n    }\n\n    /**\n     * Whether or not the entity is active.\n     * Making the entity unactive will remove it from systems and the scene tag collection and put\n     * back when active.\n     * Setting the value will make all its children be the same active state unless the child is\n     * explicitly set to be not active and the parent(s) is set to be active.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    set active(active: boolean) {\n        if (\n            this._destroyed ||\n            this.active === active ||\n            (this.parent instanceof Entity && !this.parent.active)\n        ) {\n            return;\n        }\n\n        this._setActive(active);\n        this._activeSelf = active;\n\n        this.forEachChildrenRecursive((child) => {\n            child._setActive(active && child.activeSelf);\n        });\n    }\n\n    /**\n     * The local active state.\n     * This will be regardless of its parents` active states.\n     *\n     * @readonly\n     */\n    get activeSelf(): boolean {\n        return this._activeSelf;\n    }\n\n    private _setActive(active: boolean): void {\n        if (this.active === active) return;\n        this._active = active;\n\n        // remove entity listing from components and tags\n        if (this._componentMap.size !== 0) {\n            for (const [typeName] of this._componentMap) {\n                active\n                    ? this._scene._entityComponentAdd(this, typeName)\n                    : this._scene._entityComponentRemove(this, typeName);\n            }\n        }\n\n        if (this._tagIndexMap.size !== 0) {\n            for (const [tag] of this._tagIndexMap) {\n                active ? this.addTag(tag) : this._scene._entityTagRemove(this, tag);\n            }\n        }\n    }\n\n    /**\n     * Parent of the entity. Could be either another entity, the scene or none at all.\n     */\n    get parent(): Entity | Scene | null {\n        return this._parent;\n    }\n\n    set parent(parent: Entity | Scene | null) {\n        // remove this entity from parent\n        if (this._parent !== null) {\n            this._parent.children.delete(this._name);\n        }\n\n        // add to parent\n        if (parent !== null) {\n            assert(\n                !parent.children.has(this._name),\n                `Other child with name '${this._name}' already exist!`\n            );\n            parent.children.set(this._name, this);\n        }\n\n        this._parent = parent;\n    }\n\n    /**\n     * The name of the entity.\n     */\n    get name(): string {\n        return this._name;\n    }\n\n    set name(name: string) {\n        this._name = name;\n        this.parent = this._parent;\n    }\n\n    forEachParent(func: (parent: Entity) => void): void {\n        if (this._parent instanceof Entity) {\n            func(this._parent);\n            this._parent.forEachParent(func);\n        }\n    }\n\n    forEachChildrenRecursive(func: (child: Entity) => void): void {\n        this.children.forEach((child) => {\n            func(child);\n            if (child.children.size !== 0) child.forEachChildrenRecursive(func);\n        });\n    }\n\n    /**\n     * Whether or not the entity is destroyed.\n     *\n     * @readonly\n     */\n    get destroyed(): boolean {\n        return this._destroyed;\n    }\n\n    /**\n     * Gets called when creating a new entity from the scene.\n     *\n     * @private\n     */\n    _setup(name: string, parent: Entity | Scene): void {\n        if (!this.destroyed) return;\n\n        this._activeSelf = true;\n        this._setActive(true);\n        this._destroyed = false;\n        this._parent = parent;\n        this.name = name;\n    }\n\n    /**\n     * Gets called when deleting the entity from the scene.\n     *\n     * @private\n     */\n    _destroy(): void {\n        if (this.destroyed) return;\n\n        this._setActive(false);\n        this._destroyed = true;\n        this._componentMap.clear();\n        this._tagIndexMap.clear();\n\n        this.parent = null;\n    }\n}\n","export type ObjectClassType<T, M> = new (id: number, objectManager: M) => T;\n\nexport class ObjectPool<T, M = undefined> {\n    objectClass: ObjectClassType<T, M>;\n    objectManager: M;\n    availableObjects: T[] = [];\n    totalObjects: number = 0;\n\n    constructor(objectClass: ObjectClassType<T, M>, objectManager: M) {\n        this.objectClass = objectClass;\n        this.objectManager = objectManager;\n    }\n\n    aquire(): T {\n        if (this.availableObjects.length === 0) {\n            // resize by 20%\n            this.reserve(Math.ceil(this.totalObjects * 1.2) - this.totalObjects);\n        }\n\n        const newObject = this.availableObjects.pop();\n        return newObject as T;\n    }\n\n    release(object: T): void {\n        this.availableObjects.push(object);\n    }\n\n    reserve(count: number): void {\n        for (let i = 0; i < count; i++) {\n            this.availableObjects.push(\n                new this.objectClass(i + this.totalObjects, this.objectManager)\n            );\n        }\n\n        this.totalObjects += count;\n    }\n}\n","import { Entity } from \"./entity\";\nimport { assert, mapGet, lastItemSwapRemove } from \"src/utils/misc\";\nimport { System } from \"./system\";\nimport { ObjectPool } from \"src/utils/object_pool\";\nimport { ArrayCtor } from \"src/utils/types\";\n\n/**\n * Handles all the entities.\n * Use the application to create the scene.\n *\n * ## Example\n * ```js\n * // Create application and scene\n * const app = new ESSEM.Application();\n * const scene = app.createScene();\n *\n * // Create entities, add components\n * const entity = scene.createEntity(\"MyEntity\");\n * entity.addComponent(new ESSEM.SpriteRendererComponent(texture));\n * entity.addComponent(new ESSEM.TransformComponent())\n * ```\n *\n * @memberof ESSEM\n */\nexport class Scene {\n    /**\n     * The instances of the systems for the scene that are registered.\n     */\n    systems: System[] = [];\n\n    /**\n     * A map containing scene entities mapped by their entity names.\n     */\n    children: Map<string, Entity> = new Map();\n\n    entityPool: ObjectPool<Entity, Scene>;\n\n    private _typeNameToSystem: Map<string, System[]> = new Map();\n    private _tagToEntities: Map<string, Entity[]> = new Map();\n\n    constructor() {\n        this.entityPool = new ObjectPool<Entity, Scene>(Entity, this);\n        this.entityPool.reserve(100);\n    }\n    /**\n     * Creates a new entity that is aquired from a pool for efficency.\n     *\n     * @param [name=`Unnamed Entity ${entity.id}`] - The name of the entity.\n     * @param parent - The parent for the entity. Default is the scene.\n     * @return The entity that was created.\n     */\n    createEntity(name?: string, parent: Entity | Scene = this): Entity {\n        const entity = this.entityPool.aquire();\n        entity._setup(name ?? `Unnamed Entity ${entity.id}`, parent);\n        return entity;\n    }\n\n    /**\n     * Destroys the entity and all it's children and release them back to the entity pool.\n     *\n     * @param entity - Entity to destroy.\n     */\n    destroyEntity(entity: Entity): void {\n        entity._destroy();\n        this.entityPool.release(entity);\n\n        entity.forEachChildrenRecursive((child) => {\n            child._destroy();\n            this.entityPool.release(child);\n        });\n    }\n\n    /**\n     * Gets all the entities that tagged with the tag.\n     *\n     * @param tag - The tag to use.\n     * @return An array of entities with the tag.\n     */\n    getEntitesByTag(tag: string): Entity[] {\n        return mapGet(this._tagToEntities, tag, Array as ArrayCtor<Entity>);\n    }\n\n    /**\n     * Gets called whenever a component gets added to an entity.\n     *\n     * @private\n     */\n    _entityComponentAdd(entity: Entity, typeName: string): void {\n        const systems = mapGet(this._typeNameToSystem, typeName, Array as ArrayCtor<System>);\n        systems.forEach((system) => {\n            if (entity._systemIndexMap.has(system.constructor.name)) return;\n\n            if (entity.hasAllComponents(system.typeNames)) {\n                entity._systemIndexMap.set(system.constructor.name, system.entities.length);\n                system.entities.push(entity);\n                if (system.onEntityAdd !== undefined) {\n                    system.onEntityAdd(entity);\n                }\n            }\n        });\n    }\n\n    /**\n     * Gets called whenever a component gets removed from an entity.\n     *\n     * @private\n     */\n    _entityComponentRemove(entity: Entity, typeName: string): void {\n        const systems = mapGet(this._typeNameToSystem, typeName, Array as ArrayCtor<System>);\n        systems.forEach((system) => {\n            const entityIndex = entity._systemIndexMap.get(system.constructor.name);\n            if (entityIndex === undefined) return;\n\n            // swap last element to avoid shifting entities\n            const lastEntity = lastItemSwapRemove(system.entities, entityIndex);\n            lastEntity._systemIndexMap.set(system.constructor.name, entityIndex);\n            entity._systemIndexMap.delete(system.constructor.name);\n        });\n    }\n\n    /**\n     * Gets called whenever a tag gets removed from an entity.\n     *\n     * @private\n     */\n    _entityTagRemove(entity: Entity, tag: string): void {\n        const entities = mapGet(this._tagToEntities, tag, Array as ArrayCtor<Entity>);\n        const index = entity._tagIndexMap.get(tag);\n        assert(index !== undefined, `Tag ${tag} does not exist!`);\n\n        const lastEntity = lastItemSwapRemove(entities, index);\n        lastEntity._tagIndexMap.set(tag, index);\n        entity._tagIndexMap.delete(tag);\n    }\n\n    /**\n     * Gets called whenever a tag gets added to an entity.\n     *\n     * @private\n     */\n    _entityTagAdd(entity: Entity, tag: string): void {\n        const entities = mapGet(this._tagToEntities, tag, Array as ArrayCtor<Entity>);\n        entities.push(entity);\n        entity._tagIndexMap.set(tag, entities.length - 1);\n    }\n\n    /**\n     * Gets called whenever a component type gets added to a system.\n     *\n     * @private\n     */\n    _systemTypeNameAdd(system: System, typeName: string): void {\n        const systems = mapGet(this._typeNameToSystem, typeName, Array as ArrayCtor<System>);\n        systems.push(system);\n        system.typeNames.push(typeName);\n    }\n}\n","/**\n * Checks to see if a and b are approximately equal according to the tolerance.\n *\n * @memberof ESSEM\n * @param a - The first value.\n * @param b - The second value.\n * @param {number} [tolerance=0.001] - The range to check in.\n * @return Whether or not the values are approximately equal.\n */\nexport function approxEquals(a: number, b: number, tolerance: number = 0.001): boolean {\n    return Math.abs(a - b) <= tolerance;\n}\n\n/**\n * Constant that converts degrees to radians.\n * Use the essem.js provided functions to convert instead.\n *\n * @memberof ESSEM\n * @type number\n */\nexport const DEG_TO_RAD: number = Math.PI / 180;\n\n/**\n * Converts degrees to radians.\n *\n * @memberof ESSEM\n * @param degrees - Degrees to convert.\n * @return Radians.\n */\nexport function toRadians(degrees: number): number {\n    return degrees * DEG_TO_RAD;\n}\n\n/**\n * Constant that converts radians to degrees.\n * Use the essem.js provided functions to convert instead.\n *\n * @memberof ESSEM\n * @type number\n */\nexport const RAD_TO_DEG: number = 180 / Math.PI;\n\n/**\n * Converts radians to degrees.\n *\n * @memberof ESSEM\n * @param radians - Radians to convert.\n * @return Degrees.\n */\nexport function toDegrees(radians: number): number {\n    return radians * RAD_TO_DEG;\n}\n\n/**\n * Constant that is equal to PI * 2.\n *\n * @memberof ESSEM\n */\nexport const TWO_PI = Math.PI * 2;\n","import { approxEquals } from \"./common\";\nimport { Matrix3 } from \"./matrix3\";\n\n/**\n * A 2 component vector with x and y.\n *\n * @memberof ESSEM\n */\nexport class Vector2 {\n    /**\n     * The x component of the vector.\n     */\n    x: number;\n\n    /**\n     * The y component of the vector.\n     */\n    y: number;\n\n    /**\n     * The cache for toArray.\n     */\n    private _array: Float32Array | null = null;\n\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    set(x = 0, y = 0): this {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    setVector(vector: Vector2): this {\n        this.x = vector.x;\n        this.y = vector.y;\n        return this;\n    }\n\n    clone(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n    toString(): string {\n        return `Vector2(${this.x}, ${this.y})`;\n    }\n\n    toArray(out?: Float32Array): Float32Array {\n        if (!this._array) this._array = new Float32Array(2);\n\n        const array = out ?? this._array;\n        array[0] = this.x;\n        array[1] = this.y;\n        return array;\n    }\n\n    add(vector: Vector2): this {\n        this.x += vector.x;\n        this.y += vector.y;\n        return this;\n    }\n\n    subtract(vector: Vector2): this {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        return this;\n    }\n\n    multiply(scalar: number): this {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    divide(scalar: number): this {\n        this.x /= scalar;\n        this.y /= scalar;\n        return this;\n    }\n\n    distanceSquared(vector: Vector2): number {\n        const x = this.x - vector.x;\n        const y = this.y - vector.y;\n        return x ** 2 + y ** 2;\n    }\n\n    distance(vector: Vector2): number {\n        return Math.sqrt(this.distanceSquared(vector));\n    }\n\n    magnitudeSquared(): number {\n        return this.x ** 2 + this.y ** 2;\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.magnitudeSquared());\n    }\n\n    normalize(): this {\n        this.divide(this.magnitude());\n        return this;\n    }\n\n    dot(vector: Vector2): number {\n        return this.x * vector.x + this.y + vector.y;\n    }\n\n    cross(vector: Vector2): number {\n        return this.x * vector.y - this.y * vector.x;\n    }\n\n    random(magnitude = 1): this {\n        const rValue = Math.random() * Math.PI * 2;\n        this.x = Math.cos(rValue) * magnitude;\n        this.y = Math.cos(rValue) * magnitude;\n        return this;\n    }\n\n    rotate(radians: number, origin: Vector2 = new Vector2()): this {\n        const pointX = this.x - origin.x;\n        const pointY = this.y - origin.y;\n\n        // perform rotation and translate to correct position\n        const sinC = Math.sin(radians);\n        const cosC = Math.cos(radians);\n        this.x = pointX * cosC - pointY * sinC + origin.x;\n        this.y = pointX * sinC + pointY * cosC + origin.y;\n        return this;\n    }\n\n    angle(origin: Vector2 = new Vector2()): number {\n        return Math.atan2(this.y - this.y, origin.x - origin.x);\n    }\n\n    exactEquals(vector: Vector2): boolean {\n        return this.x === vector.x && this.y === vector.y;\n    }\n\n    /**\n     * Checks to see if this vector is approximately equal to the input vector\n     * according to tolerance.\n     *\n     * @param vector - The input vector to compare.\n     * @param {number} [tolerance=0.001] - The range to check in.\n     * @return Whether or not the vectors are approximately equal.\n     */\n    approxEquals(vector: Vector2, tolerance: number = 0.001): boolean {\n        return (\n            approxEquals(this.x, vector.x, tolerance) && approxEquals(this.y, vector.y, tolerance)\n        );\n    }\n\n    transformMatrix3(matrix: Matrix3): this {\n        const x = this.x;\n        this.x = matrix.xScale * x + matrix.xSkew * this.y + matrix.xTrans;\n        this.y = matrix.ySkew * x + matrix.yScale * this.y + matrix.yTrans;\n        return this;\n    }\n}\n","import { mapGet } from \"src/utils/misc\";\nimport { AnyCtor } from \"src/utils/types\";\n\n/**\n * Event base class that all events must extend from.\n *\n * @memberof ESSEM\n */\nexport abstract class Event {\n    /**\n     * Whether or not the event has been handled. Set this to true to make it stopped\n     * being sent to all other event listeners.\n     */\n    handled = false;\n}\n\nexport type EventListenerFunc<T extends Event = Event> = (event: T) => void;\n\n/**\n * Used to add listeners and send events. It is automatically created when creating\n * {@link ESSEM.Application} and it can be accesed from `app.events`.\n *\n * @memberof ESSEM\n */\nexport class EventManager {\n    eventListenersMap: Map<string, EventListenerFunc[]> = new Map();\n\n    /**\n     * Adds a function to act as a listener to listen and receive the specified event.\n     *\n     * @param eventType - The event class or name for the listener to listen to.\n     * @param listenerFunc - The function that will receive the events.\n     */\n    addListener<T extends Event>(\n        eventType: AnyCtor<T> | string,\n        listenerFunc: EventListenerFunc<T>\n    ): void {\n        const eventName = (eventType as AnyCtor<T>).name ?? eventType;\n        const listeners = mapGet(this.eventListenersMap, eventName, Array) as EventListenerFunc[];\n        listeners.push(listenerFunc as EventListenerFunc<Event>);\n    }\n\n    /**\n     * Send a event for all event's listeners to get.\n     *\n     * @param event - An instance of the event to send. Same named classes will be considered as\n     *                the same event.\n     */\n    sendEvent(event: Event): void {\n        const eventName = event.constructor.name;\n        const listeners = mapGet(this.eventListenersMap, eventName, Array) as EventListenerFunc[];\n        for (let i = 0; i < listeners.length; i++) {\n            if (event.handled) break;\n            listeners[i](event);\n        }\n    }\n}\n","import { Event } from \"./event_manager\";\n\n/**\n * Event that is sent whenever a key is pressed.\n *\n * @memberof ESSEM\n */\nexport class KeyPressedEvent extends Event {\n    /**\n     * The key code (from window.KeyboardEvent) of the event.\n     */\n    readonly code: string;\n\n    /**\n     * If the key was repeated.\n     */\n    readonly repeated: boolean;\n\n    constructor(code: string, repeated: boolean) {\n        super();\n        this.code = code;\n        this.repeated = repeated;\n    }\n}\n\n/**\n * Event that is sent whenever a key is released.\n *\n * @memberof ESSEM\n */\nexport class KeyReleasedEvent extends Event {\n    /**\n     * The key code (from window.KeyboardEvent) of the event.\n     */\n    readonly code: string;\n\n    constructor(code: string) {\n        super();\n        this.code = code;\n    }\n}\n\n/**\n * Event that is sent whenever a key is typed.\n * This uses the actual key that the user types.\n *\n * @memberof ESSEM\n */\nexport class KeyTypedEvent extends Event {\n    /**\n     * The key of the event as in what the user actually typed. Eg: shift + x with be X.\n     */\n    readonly key: string;\n\n    constructor(key: string) {\n        super();\n        this.key = key;\n    }\n}\n\n/**\n * Event that is sent whenever a the mouse is pressed.\n *\n * @memberof ESSEM\n */\nexport class MousePressedEvent extends Event {\n    /*\n     * Which mouse button code (from window.MouseEvent) was used to click.\n     */\n    readonly button: number;\n\n    constructor(button: number) {\n        super();\n        this.button = button;\n    }\n}\n\n/**\n * Event that is sent whenever a the mouse is released.\n *\n * @memberof ESSEM\n */\nexport class MouseReleasedEvent extends Event {\n    /*\n     * Which mouse button code (from window.MouseEvent) was released.\n     */\n    readonly button: number;\n\n    constructor(button: number) {\n        super();\n        this.button = button;\n    }\n}\n\n/**\n * Event that is sent whenever a the mouse is moved.\n *\n * @memberof ESSEM\n */\nexport class MouseMovedEvent extends Event {\n    /**\n     * How much the mouse has moved on the x axis.\n     */\n    readonly offsetX: number;\n\n    /**\n     * How much the mouse has moved on the y axis.\n     */\n    readonly offsetY: number;\n\n    constructor(x: number, y: number) {\n        super();\n        this.offsetX = x;\n        this.offsetY = y;\n    }\n}\n\n/**\n * Event that is sent whenever a the mouse wheel is scrolled.\n *\n * @memberof ESSEM\n */\nexport class MouseScrolledEvent extends Event {\n    /**\n     * How much the mouse wheel has scrolled on the x axis.\n     */\n    readonly offsetX: number;\n\n    /**\n     * How much the mouse wheel has scrolled on the y axis.\n     */\n    readonly offsetY: number;\n\n    constructor(x: number, y: number) {\n        super();\n        this.offsetX = x;\n        this.offsetY = y;\n    }\n}\n","import { Vector2 } from \"src/math/vector2\";\nimport { Event, EventManager } from \"./event_manager\";\nimport {\n    KeyPressedEvent,\n    KeyReleasedEvent,\n    KeyTypedEvent,\n    MouseMovedEvent,\n    MousePressedEvent,\n    MouseReleasedEvent,\n    MouseScrolledEvent,\n} from \"./input_events\";\n\n/**\n * Event that gets sent whenever the canvas resizes.\n * This won't get called if just the window does though.\n *\n * @memberof ESSEM\n */\nexport class CanvasResizedEvent extends Event {\n    /**\n     * The current width of the canvas.\n     */\n    readonly width: number;\n\n    /**\n     * The current height of the canvas.\n     */\n    readonly height: number;\n\n    constructor(width: number, height: number) {\n        super();\n        this.width = width;\n        this.height = height;\n    }\n}\n\nexport interface ICanvasOptions {\n    fixedSize?: boolean;\n    width?: number;\n    height?: number;\n    aspectRatio?: number;\n}\n\n/**\n * Used for the canvas element and input events. It is automatically created when creating\n * {@link ESSEM.Application} and it can be accesed from `app.canvas`.\n *\n * @memberof ESSEM\n */\nexport class Canvas {\n    /**\n     * The DOM element of the canvas. Add this into your page by doing\n     * `document.body.appendChild(canvas)` in order to see yourr graphics.\n     */\n    element: HTMLCanvasElement;\n\n    /**\n     * Whether or not the canvas is fixed and cannot resize to fit window.\n     */\n    fixedSize: boolean;\n\n    /**\n     * The aspect ratio that the canvas will fit to if it resizes.\n     */\n    aspectRatio: number | null;\n\n    /**\n     * The current width of the canvas.\n     */\n    width!: number;\n\n    /**\n     * The current height of the canvas.\n     */\n    height!: number;\n\n    private _eventManager: EventManager;\n    private _pressedKeys: Map<string, boolean> = new Map();\n    private _pressedMouseButtons: Map<number, boolean> = new Map();\n    private _mousePosition: Vector2 = new Vector2();\n\n    /**\n     * @param {object} [options={}] - Parameters as an object for the Canvas.\n     * @param {number} [options.aspectRatio] - Aspect ratio for the canvas to resize to if fixedSize\n     *                                         is true. Leave empty for no aspect ratio.\n     * @param {boolean} [options.fixedSize=true] - Will resize to fit window if true.\n     * @param {number} [options.width=400] - Initial width.\n     * @param {number} [options.height=400] - Initial height.\n     */\n    constructor(options: ICanvasOptions = {}, eventManager: EventManager) {\n        this.fixedSize = options.fixedSize ?? true;\n        this._eventManager = eventManager;\n\n        this.aspectRatio = options.aspectRatio ?? null;\n        this.element = document.createElement(\"canvas\");\n\n        if (!this.fixedSize) {\n            this.resizeFull();\n        } else {\n            this.resizeCanvas(options.width ?? 400, options.height ?? 400);\n        }\n\n        window.addEventListener(\"keydown\", (event) => {\n            this._pressedKeys.set(event.code, true);\n            this._eventManager.sendEvent(new KeyPressedEvent(event.code, event.repeat));\n        });\n\n        window.addEventListener(\"keyup\", (event) => {\n            this._pressedKeys.set(event.code, false);\n            this._eventManager.sendEvent(new KeyReleasedEvent(event.code));\n        });\n\n        window.addEventListener(\"keypress\", (event) => {\n            this._eventManager.sendEvent(new KeyTypedEvent(event.key));\n        });\n\n        window.addEventListener(\"mousedown\", (event) => {\n            this._eventManager.sendEvent(new MousePressedEvent(event.button));\n            this._pressedMouseButtons.set(event.button, true);\n        });\n\n        window.addEventListener(\"mouseup\", (event) => {\n            this._eventManager.sendEvent(new MouseReleasedEvent(event.button));\n            this._pressedMouseButtons.set(event.button, false);\n        });\n\n        window.addEventListener(\"mousemove\", (event) => {\n            this._eventManager.sendEvent(new MouseMovedEvent(event.offsetX, event.offsetY));\n            this._mousePosition.set(event.clientX, event.clientY);\n        });\n\n        window.addEventListener(\"wheel\", (event) => {\n            this._eventManager.sendEvent(new MouseScrolledEvent(event.offsetX, event.offsetY));\n        });\n\n        window.addEventListener(\"resize\", () => {\n            if (!this.fixedSize) {\n                this.resizeFull();\n            }\n        });\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     *\n     * @param width - The width to resize to.\n     * @param height - The height to resize to.\n     * @param {boolean} [sendEvent=true] - Whether or not to send a CanvasResizedEvent.\n     */\n    resizeCanvas(width: number, height: number, sendEvent: boolean = true): void {\n        this.width = width;\n        this.height = height;\n        this.element.width = width;\n        this.element.height = height;\n\n        if (sendEvent) {\n            this._eventManager.sendEvent(new CanvasResizedEvent(width, height));\n        }\n    }\n\n    /**\n     * Checks if the specified key is held down.\n     *\n     * @param keyCode - The key code (from window.KeyboardEvent) to check.\n     * @return Whether or not the key was held down.\n     */\n    isKeyPressed(keyCode: string): boolean {\n        return this._pressedKeys.get(keyCode) ?? false;\n    }\n\n    /**\n     * Checks if the specified mouse button is held down.\n     *\n     * @param button - The mouse button code (from window.MouseEvent) to check.\n     * @return Whether or not the mouse button was held down.\n     */\n    isMousePressed(button: number): boolean {\n        return this._pressedMouseButtons.get(button) ?? false;\n    }\n\n    /**\n     * Gets the current mouse position.\n     *\n     * @return The current mouse position.\n     */\n    getMousePosition(): Vector2 {\n        return this._mousePosition.clone();\n    }\n\n    /**\n     * Resizes the canvas to fit the window with accordence to the aspect ratio.\n     */\n    resizeFull(): void {\n        if (this.aspectRatio !== null) {\n            let height = window.innerHeight;\n            const aspectWidth = window.innerWidth / this.aspectRatio;\n            if (aspectWidth < height) height = aspectWidth;\n\n            this.resizeCanvas(height * this.aspectRatio, height);\n        } else {\n            this.resizeCanvas(window.innerWidth, window.innerHeight);\n        }\n    }\n}\n","import { assert } from \"src/utils/misc\";\n\nexport class AudioClip {\n    volume: number = 1;\n    loop: boolean = false;\n    playing: boolean = false;\n\n    readonly buffer: AudioBuffer;\n    source: AudioBufferSourceNode | null = null;\n    gain: GainNode | null = null;\n\n    private _context: AudioContext;\n\n    constructor(buffer: AudioBuffer, context: AudioContext) {\n        this.buffer = buffer;\n        this._context = context;\n    }\n\n    static async fromURL(url: string, context: AudioContext): Promise<AudioClip> {\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const decodedAudio = await context.decodeAudioData(arrayBuffer);\n        return new AudioClip(decodedAudio, context);\n    }\n\n    play(): void {\n        const source = this._context.createBufferSource();\n        source.buffer = this.buffer;\n        source.start(this._context.currentTime);\n        source.loop = this.loop;\n        source.onended = () => (this.playing = false);\n\n        const gain = this._context.createGain();\n        source.connect(gain);\n        gain.connect(this._context.destination);\n        gain.gain.value = this.volume;\n\n        this.playing = true;\n        this.source = source;\n        this.gain = gain;\n    }\n\n    stop(): void {\n        assert(this.source !== null, \"Can't stop when the audio clip has not started.\");\n        this.source.stop(this._context.currentTime);\n    }\n\n    toggle(): void {\n        this.playing ? this.stop() : this.play();\n    }\n}\n","import { assert } from \"src/utils/misc\";\n\nexport type TextureSource = HTMLImageElement | HTMLCanvasElement;\n\n/**\n * Class that is used to render images.\n *\n * @memberof ESSEM\n */\nexport class Texture {\n    source: TextureSource;\n    glTexture: WebGLTexture | null = null;\n    aspectRatio: number;\n\n    constructor(source: TextureSource) {\n        this.source = source;\n        this.aspectRatio = this.source.width / this.source.height;\n    }\n\n    /**\n     * Inits the texture. This will get automatically called when binding the texture.\n     *\n     * @param gl - An WebGL2 rendering context for the texture to use.\n     */\n    init(gl: WebGL2RenderingContext): void {\n        this.glTexture = gl.createTexture();\n        assert(this.glTexture !== null, \"Could not create glTexture!\");\n        this.bind(gl);\n        // TODO: add options for this\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            this.source.width,\n            this.source.height,\n            0,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            this.source\n        );\n    }\n\n    /**\n     * Binds the texture.\n     *\n     * @param gl - An WebGL2 rendering context for the texture to use.\n     * @param slot - The texture slot for the texture to be binded to (optional).\n     */\n    bind(gl: WebGL2RenderingContext, slot?: number): void {\n        if (slot) {\n            gl.activeTexture(gl.TEXTURE0 + slot);\n        }\n\n        if (this.glTexture === null) {\n            this.init(gl);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this.glTexture);\n        }\n    }\n\n    dispose(gl: WebGL2RenderingContext): void {\n        gl.deleteTexture(this.glTexture);\n        this.glTexture = null;\n    }\n\n    static async fromURL(url: string): Promise<Texture> {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            image.src = url;\n            image.onload = () => {\n                const texture = new Texture(image);\n                resolve(texture);\n            };\n\n            image.onerror = (event) => reject(event);\n        });\n    }\n\n    static readonly WHITE = createWhiteTexture();\n}\n\nfunction createWhiteTexture(): Texture {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 16;\n    canvas.height = 16;\n\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, 16, 16);\n    return new Texture(canvas);\n}\n","import { AnyCtor } from \"src/utils/types\";\nimport { AudioClip } from \"./audio_clip\";\nimport { Texture } from \"src/renderer/texture\";\n\ntype ResourceTypes = Texture | AudioClip;\ntype ResourceTypeNames = \"Texture\" | \"AudioClip\";\n\n/**\n * Used for loading resources such as images. It is automatically created when creating\n * {@link ESSEM.Application} and it can be accesed from `app.loader`.\n *\n * @memberof ESSEM\n */\nexport class Loader {\n    private _audioContext: AudioContext;\n\n    resourceURLs: [ResourceTypeNames, string][] = [];\n    resources: { [key: string]: ResourceTypes } = {};\n\n    constructor(audioContext: AudioContext) {\n        this._audioContext = audioContext;\n    }\n\n    add(resourceType: AnyCtor<ResourceTypes> | ResourceTypeNames, url: string): this {\n        const resourceTypeName = (resourceType as AnyCtor<ResourceTypes>).name ?? resourceType;\n        this.resourceURLs.push([resourceTypeName as ResourceTypeNames, url]);\n        return this;\n    }\n\n    async loadAll(): Promise<void> {\n        for (const [resourceTypeName, url] of this.resourceURLs) {\n            switch (resourceTypeName) {\n                case \"AudioClip\":\n                    this.resources[url] = await AudioClip.fromURL(url, this._audioContext);\n                    break;\n                case \"Texture\":\n                    this.resources[url] = await Texture.fromURL(url);\n            }\n        }\n\n        this.resourceURLs = [];\n    }\n}\n","import { Renderer } from \"src/renderer/renderer\";\nimport { Scene } from \"src/ecs/scene\";\nimport { System, SystemClass } from \"src/ecs/system\";\nimport { Canvas, CanvasResizedEvent, ICanvasOptions } from \"./canvas\";\nimport { Event, EventManager } from \"./event_manager\";\nimport { Loader } from \"./loader\";\nimport { sayHello } from \"src/utils/browser\";\n\n/** * Event that is sent whenever the Application initiates.\n *\n * @memberof ESSEM\n */\nexport class ApplicationInitEvent extends Event {}\n\n/**\n * Event that is sent whenever the Application updates.\n *\n * @memberof ESSEM\n */\nexport class ApplicationUpdateEvent extends Event {\n    /**\n     * The delta time of the update.\n     */\n    delta: number;\n\n    /**\n     * @param delta - The delta time of the update.\n     */\n    constructor(delta: number) {\n        super();\n        this.delta = delta;\n    }\n}\n\nexport interface IApplicationOptions {\n    canvasOptions?: ICanvasOptions;\n}\n\n/**\n * Class that is used for everything in essem.js.\n *\n * ## Example\n * ```js\n * // Create the application\n * const app = new ESSEM.Application();\n *\n * // Add the canvas element to the DOM\n * document.body.appendChild(app.canvas.element);\n *\n * // Create scene, add entities, add components ect.\n * const scene = app.createScene();\n * ```\n *\n * @memberof ESSEM\n */\nexport class Application {\n    audioContext: AudioContext = new AudioContext();\n    canvas: Canvas;\n    eventManager: EventManager = new EventManager();\n    loader: Loader;\n    renderer: Renderer;\n\n    lastFrameTime = 0;\n    running = true;\n\n    private _systemClasses: SystemClass[] = [];\n\n    /**\n     * @param {object} [options={}] - Optional parameters for Application.\n     * @param {object} [options.canvasOptions={}] - Optional parameters for the canvas.\n     *        See {@link ESSEM.Canvas}\n     */\n    constructor(options: IApplicationOptions = {}) {\n        this.canvas = new Canvas(options.canvasOptions, this.eventManager);\n        this.loader = new Loader(this.audioContext);\n        this.renderer = new Renderer(this.canvas.element);\n\n        setTimeout(async () => {\n            await this.loader.loadAll();\n            this.eventManager.sendEvent(new ApplicationInitEvent());\n\n            this.eventManager.addListener(CanvasResizedEvent, (event: CanvasResizedEvent) => {\n                this.renderer.gl.viewport(0, 0, event.width, event.height);\n            });\n\n            sayHello();\n\n            const loop = () => {\n                if (this.running) {\n                    this._onUpdate();\n                    requestAnimationFrame(loop);\n                }\n            };\n\n            requestAnimationFrame(loop);\n        });\n    }\n\n    /**\n     * The update function that gets called every requestAnimationFrame loop.\n     *\n     * @private\n     */\n    private _onUpdate(): void {\n        const now = performance.now();\n        const delta = now - this.lastFrameTime;\n\n        this.renderer.update();\n        this.eventManager.sendEvent(new ApplicationUpdateEvent(delta));\n\n        this.lastFrameTime = now;\n    }\n\n    /**\n     * Registers a parameterized array of system classes.\n     * Use like this: `app.registerSystem(System1, System2, ...);`\n     * Do all the registering at the start or the system will not work.\n     *\n     * @param {...SystemClass} systemClasses - An parameterized array of classes that extends\n     *        {@link ESSEM.System}\n     */\n    registerSystem(...systemClasses: SystemClass[]): void {\n        this._systemClasses.push(...systemClasses);\n    }\n\n    /**\n     * Creates a new scene.\n     *\n     * @return A new Scene.\n     */\n    createScene(): Scene {\n        const scene = new Scene();\n        const systems: System[] = [];\n        this._systemClasses.forEach((systemClass) => {\n            const system = new systemClass(scene);\n            system.setup(this);\n            systems.push(system);\n        });\n\n        scene.systems = systems;\n        return scene;\n    }\n}\n","import { Vector2 } from \"./vector2\";\n\n/**\n * The matrix as this class make it a lot faster since there are less values to work with.\n *\n * Here's a representation of it:\n * ```js\n * | xScale | xSkew | xTrans |\n * | ySkew  | yScale| yTrans |\n * | 0      | 0     | 1      |\n * ```\n *\n * @memberof ESSEM\n */\nexport class Matrix3 {\n    xScale: number;\n    ySkew: number;\n    xSkew: number;\n    yScale: number;\n    xTrans: number;\n    yTrans: number;\n\n    private _array: Float32Array | null = null;\n\n    constructor(xScale = 1, ySkew = 0, xSkew = 0, yScale = 1, xTrans = 0, yTrans = 0) {\n        this.xScale = xScale;\n        this.ySkew = ySkew;\n        this.xSkew = xSkew;\n        this.yScale = yScale;\n        this.xTrans = xTrans;\n        this.yTrans = yTrans;\n    }\n\n    clone(): Matrix3 {\n        return new Matrix3(\n            this.xScale,\n            this.ySkew,\n            this.xSkew,\n            this.yScale,\n            this.xTrans,\n            this.yTrans\n        );\n    }\n\n    toString(): string {\n        return (\n            `Matrix3(\\n\\t` +\n            `${this.xScale}, ${this.xSkew}, ${this.xTrans},\\n\\t` +\n            `${this.ySkew}, ${this.yScale}, ${this.yTrans},\\n\\t` +\n            `0, 0, 1\\n)`\n        );\n    }\n\n    toArray(transpose = true, out?: Float32Array): Float32Array {\n        if (!this._array) this._array = new Float32Array(9);\n\n        const array = out ?? this._array;\n\n        if (transpose) {\n            array[0] = this.xScale;\n            array[1] = this.ySkew;\n            array[2] = 0;\n            array[3] = this.xSkew;\n            array[4] = this.yScale;\n            array[5] = 0;\n            array[6] = this.xTrans;\n            array[7] = this.yTrans;\n            array[8] = 1;\n        } else {\n            array[0] = this.xScale;\n            array[1] = this.xSkew;\n            array[2] = this.xTrans;\n            array[3] = this.ySkew;\n            array[4] = this.yScale;\n            array[5] = this.yTrans;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    invert(): this {\n        const xScale = this.xScale;\n        const ySkew = this.ySkew;\n        const xSkew = this.xSkew;\n        const yScale = this.yScale;\n        const xTrans = this.xTrans;\n        const det = xScale * yScale - ySkew * xSkew;\n        if (det === 0) return this;\n\n        this.xScale = yScale / det;\n        this.ySkew = -ySkew / det;\n        this.xSkew = -xSkew / det;\n        this.yScale = xScale / det;\n        this.xTrans = (xSkew * this.yTrans - yScale * xTrans) / det;\n        this.yTrans = -(xScale * this.yTrans - xSkew * xTrans) / det;\n        return this;\n    }\n\n    identity(): this {\n        this.xScale = 1;\n        this.ySkew = 0;\n        this.xSkew = 0;\n        this.yScale = 1;\n        this.xTrans = 0;\n        this.yTrans = 0;\n        return this;\n    }\n\n    multiply(matrix: Matrix3): this {\n        const xScale = this.xScale;\n        const ySkew = this.ySkew;\n        const xSkew = this.xSkew;\n        const yScale = this.yScale;\n\n        this.xScale = xScale * matrix.xScale + xSkew * matrix.ySkew;\n        this.ySkew = ySkew * matrix.xScale + yScale * matrix.ySkew;\n        this.xSkew = xScale * matrix.xSkew + xSkew * matrix.yScale;\n        this.yScale = ySkew * matrix.xSkew + yScale * matrix.yScale;\n\n        this.xTrans = xScale * matrix.xTrans + xSkew * matrix.yTrans + this.xTrans;\n        this.yTrans = ySkew * matrix.xTrans + yScale * matrix.yTrans + this.yTrans;\n        return this;\n    }\n\n    multiplyFront(matrix: Matrix3): this {\n        const xTrans = this.xTrans;\n\n        if (\n            matrix.xScale !== 1 ||\n            matrix.ySkew !== 0 ||\n            matrix.xSkew !== 0 ||\n            matrix.yScale !== 1\n        ) {\n            const xScale1 = this.xScale;\n            const xSkew = this.xSkew;\n\n            this.xScale = xScale1 * matrix.xScale + this.ySkew * matrix.xSkew;\n            this.ySkew = xScale1 * matrix.ySkew + this.ySkew * matrix.yScale;\n            this.xSkew = xSkew * matrix.xScale + this.yScale * matrix.xSkew;\n            this.yScale = xSkew * matrix.ySkew + this.yScale * matrix.yScale;\n        }\n\n        this.xTrans = xTrans * matrix.xScale + this.yTrans * matrix.xSkew + matrix.xTrans;\n        this.yTrans = xTrans * matrix.ySkew + this.yTrans * matrix.yScale + matrix.yTrans;\n        return this;\n    }\n\n    translate(x: number, y: number): this {\n        this.xTrans += x;\n        this.yTrans += y;\n        return this;\n    }\n\n    scale(x: number, y: number): this {\n        this.xScale *= x;\n        this.yScale *= y;\n        this.xSkew *= x;\n        this.ySkew *= y;\n        this.xTrans *= x;\n        this.yTrans *= y;\n        return this;\n    }\n\n    rotate(angle: number): this {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const xScale = this.xScale;\n        const xSkew = this.xSkew;\n        const xTrans = this.xTrans;\n\n        this.xScale = xScale * cos - this.ySkew * sin;\n        this.ySkew = xScale * sin + this.ySkew * cos;\n        this.xSkew = xSkew * cos - this.yScale * sin;\n        this.yScale = xSkew * sin + this.yScale * cos;\n        this.xTrans = xTrans * cos - this.yTrans * sin;\n        this.yTrans = xTrans * sin + this.yTrans * cos;\n        return this;\n    }\n\n    // TODO: perhaps make this not use matrix funcions?\n    transform(position: Vector2, scale: Vector2, rotation: number): this {\n        this.identity();\n        if (rotation !== 0) {\n            this.rotate(rotation);\n        }\n\n        this.translate(position.x, position.y).scale(scale.x, scale.y);\n        return this;\n    }\n\n    projection(left: number, right: number, bottom: number, top: number): this {\n        const rl = right - left;\n        const tp = top - bottom;\n\n        this.xScale = 2 / rl;\n        this.yScale = 2 / tp;\n        this.xTrans = (right + left) / rl;\n        this.yTrans = (top + bottom) / tp;\n        this.xSkew = 0;\n        this.ySkew = 0;\n        return this;\n    }\n}\n","import { Matrix3 } from \"src/math/matrix3\";\n\n/**\n * Component to handle camera stuff\n * All render systems will look for a entity tagged 'MainCamera' as the camera to render with.\n *\n * @memberof ESSEM\n */\nexport class CameraComponent {\n    aspectRatio = 0;\n    fixedAspectRatio: boolean;\n    size: number;\n    private _projectionMatrix: Matrix3 = new Matrix3();\n\n    constructor(zoom = 5, fixedAspectRatio = false) {\n        this.size = zoom;\n        this.fixedAspectRatio = fixedAspectRatio;\n    }\n\n    setViewportSize(width: number, height: number): void {\n        this.aspectRatio = width / height;\n    }\n\n    getProjectionMatrix(): Matrix3 {\n        return this._projectionMatrix.projection(\n            -this.size * this.aspectRatio,\n            this.size * this.aspectRatio,\n            this.size,\n            -this.size\n        );\n    }\n}\n","import { Texture } from \"src/renderer/texture\";\nimport { hexToRGBA } from \"src/utils/colors\";\n\n/**\n * Component that handles sprite info like textures and colours.\n *\n * @memberof ESSEM\n */\nexport class SpriteComponent {\n    /**\n     * The texture of the sprite in use.\n     */\n    readonly texture: Texture;\n\n    /**\n     * The RGBA colour of the sprite as a 4 length Float32Array.\n     */\n    rgbaColor!: Float32Array;\n\n    private _hexColor!: number;\n\n    /**\n     * @param texture - Texture to use. This should be resued between other components.\n     * @param color -\n     */\n    constructor(texture: Texture, color = 0xffffff) {\n        this.texture = texture;\n        this.color = color;\n    }\n\n    /**\n     * Colour of the sprite in hexadecimal.\n     */\n    set color(hex: number) {\n        this._hexColor = hex;\n        this.rgbaColor = hexToRGBA(hex);\n    }\n\n    get color(): number {\n        return this._hexColor;\n    }\n}\n","import { Entity } from \"../entity\";\nimport { Matrix3 } from \"src/math/matrix3\";\nimport { Vector2 } from \"src/math/vector2\";\n\n/**\n * Component that holds the position, scale and rotation of an entity.\n *\n * @memberof ESSEM\n */\nexport class TransformComponent {\n    private _position: Vector2;\n    private _scale: Vector2;\n    private _rotation: number;\n    private _transformMatrix: Matrix3 = new Matrix3();\n    private _transformValid = false;\n\n    /**\n     * @param position - Starting position.\n     * @param scale - Starting scale.\n     * @param rotation - Starting rotation.\n     */\n    constructor(position = new Vector2(), scale = new Vector2(1, 1), rotation = 0) {\n        this._position = position;\n        this._scale = scale;\n        this._rotation = rotation;\n    }\n\n    /**\n     * Matrix that holds the transform of the component.\n     * This value will be cached and invalidated when making any changes to the component.\n     *\n     * @readonly\n     */\n    get transformMatrix(): Matrix3 {\n        if (!this._transformValid) {\n            this._transformMatrix.transform(this._position, this._scale, this._rotation);\n            this._transformValid = true;\n        }\n\n        return this._transformMatrix;\n    }\n\n    /**\n     * Rotation of the component.\n     */\n    set rotation(rotation: number) {\n        this._transformValid = false;\n        this._rotation = rotation;\n    }\n\n    get rotation(): number {\n        return this._rotation;\n    }\n\n    /**\n     * Position of the component.\n     */\n    set position(position: Vector2) {\n        this._transformValid = false;\n        this._position = position;\n    }\n\n    get position(): Vector2 {\n        this._transformValid = false;\n        return this._position;\n    }\n\n    /**\n     * Scale of the component.\n     */\n    set scale(scale: Vector2) {\n        this._transformValid = false;\n        this._scale = scale;\n    }\n\n    get scale(): Vector2 {\n        this._transformValid = false;\n        return this._scale;\n    }\n\n    static getGlobalPosition(entity: Entity): Vector2 {\n        const vector = entity.getComponent(TransformComponent)._position.clone();\n        entity.forEachParent((parent) => {\n            vector.add(parent.getComponent(TransformComponent)._position);\n        });\n\n        return vector;\n    }\n\n    static getGlobalScale(entity: Entity): Vector2 {\n        const vector = entity.getComponent(TransformComponent)._scale.clone();\n        entity.forEachParent((parent) => {\n            vector.add(parent.getComponent(TransformComponent)._scale);\n        });\n\n        return vector;\n    }\n\n    static getGlobalRotation(entity: Entity): number {\n        let rotation = entity.getComponent(TransformComponent)._rotation;\n        entity.forEachParent((parent) => {\n            rotation += parent.getComponent(TransformComponent)._rotation;\n        });\n\n        return rotation;\n    }\n\n    /**\n     * Gets the global transform matrix relative to all the entity's parents.\n     *\n     * @param entity - Entity to get the global transform matrix of.\n     * @return A global transform matrix.\n     */\n    static getGlobalTransformMatrix(entity: Entity): Matrix3 {\n        const matrix = entity.getComponent(TransformComponent).transformMatrix;\n        entity.forEachParent((parent) => {\n            matrix.multiplyFront(parent.getComponent(TransformComponent).transformMatrix);\n        });\n\n        return matrix;\n    }\n}\n","import { Application } from \"src/core/application\";\nimport { ComponentClass, Entity } from \"./entity\";\nimport { Scene } from \"./scene\";\nimport { getTypeName } from \"src/utils/misc\";\n\nexport type SystemClass = new (scene: Scene) => System;\n\n/**\n * System base class to extend to collect all the wanted entities and do stuff to them.\n * * ## Example * ```js\n * // System that logs hello for each entity with a transform component\n * class HelloSystem extends ESSEM.System {\n *     setup(app) {\n *         app.eventManager.addListener(ESSEM.ApplicationUpdateEvent, this.onUpdate.bind(this));\n *         this.setComponents(ESSEM.TransformComponent);\n *     }\n *\n *     onUpdate() {\n *         for (entity of this.entities) {\n *             const transform = entity.getComponent(ESSEM.TransformComponent);\n *             console.log(\"Hello from: \" + tranform.position.toString())\n *         }\n *     }\n * }\n *\n * const app = new ESSEM.Application();\n * app.registerSystem(HelloSystem);\n * const scene = app.createScene()\n *\n * // Logs \"Hello from: Vector2(0, 1)\" every frame\n * const entity = scene.createEntity();\n * entity.addComponent(new TransformComponent(new ESSEM.Vector2(0, 1)));\n * ```\n *\n * @memberof ESSEM\n */\nexport abstract class System {\n    /**\n     * The entities that have the system's component types.\n     */\n    entities: Entity[] = [];\n\n    /**\n     * The name of the component types that has been set.\n     */\n    typeNames: string[] = [];\n\n    /**\n     * The scene that the system is active on.\n     */\n    protected scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n    }\n\n    /**\n     * Abstract function that gets called when the system is created. This should be overrided to\n     * setup component types and event listeners.\n     *\n     * @param app - The application that the system was registed from. Use this to register event\n     *        listeners and other stuff.\n     */\n    abstract setup(app: Application): void;\n\n    /**\n     * Optional abstract function that gets called whenever a matching entity gets added.\n     *\n     * @param entity - The entity that was added to this.entites.\n     */\n    onEntityAdd?(entity: Entity): void;\n\n    /**\n     * Sets the component types that the system will use to collect entities.\n     * Note that previous sets of component types will not be removed and so new sets will just be\n     * added on top.\n     *\n     * @param componentTypes - Array of component classes or names.\n     */\n    setComponents(componentTypes: (ComponentClass | string)[]): void {\n        for (const componentType of componentTypes) {\n            const typeName = getTypeName(componentType);\n            this.scene._systemTypeNameAdd(this, typeName);\n        }\n    }\n}\n","import { Application } from \"src/core/application\";\nimport { Canvas, CanvasResizedEvent } from \"src/core/canvas\";\nimport { Entity } from \"../entity\";\nimport { System } from \"../system\";\nimport { CameraComponent } from \"src/ecs/components/camera_component\";\nimport { TransformComponent } from \"src/ecs/components/transform_component\";\n\n/**\n * Register this system when handling cameras.\n *\n * @memberof ESSEM\n */\nexport class CameraSystem extends System {\n    canvas!: Canvas;\n\n    setup(app: Application): void {\n        this.setComponents([TransformComponent, CameraComponent]);\n        app.eventManager.addListener(CanvasResizedEvent, this.onResized.bind(this));\n        this.canvas = app.canvas;\n    }\n\n    onEntityAdd(entity: Entity): void {\n        const cameraComponent = entity.getComponent(CameraComponent);\n        if (!cameraComponent.fixedAspectRatio) {\n            cameraComponent.setViewportSize(this.canvas.width, this.canvas.height);\n        }\n    }\n\n    onResized(event: CanvasResizedEvent): void {\n        this.entities.forEach((entity) => {\n            const cameraComponent = entity.getComponent(CameraComponent);\n            if (!cameraComponent.fixedAspectRatio) {\n                cameraComponent.setViewportSize(event.width, event.height);\n            }\n        });\n    }\n}\n","import { Matrix3 } from \"src/math/matrix3\";\nimport { Vector2 } from \"src/math/vector2\";\nimport { assert } from \"src/utils/misc\";\n\nexport class Shader {\n    vertexSrc: string;\n    fragmentSrc: string;\n    name: string;\n\n    glProgram: WebGLProgram | null = null;\n    uniformLocationCache: Map<string, WebGLUniformLocation> = new Map();\n\n    constructor(vertexSrc: string, fragmentSrc: string, name = \"Default\") {\n        this.vertexSrc = vertexSrc;\n        this.fragmentSrc = fragmentSrc;\n        this.name = name;\n    }\n\n    init(gl: WebGL2RenderingContext): void {\n        const glVertexShader = this._compileGLShader(gl, gl.VERTEX_SHADER, this.vertexSrc);\n        const glFragmentShader = this._compileGLShader(gl, gl.FRAGMENT_SHADER, this.fragmentSrc);\n\n        this.glProgram = gl.createProgram();\n        assert(this.glProgram !== null, `Could not create glProgram!`);\n        gl.attachShader(this.glProgram, glVertexShader);\n        gl.attachShader(this.glProgram, glFragmentShader);\n\n        gl.linkProgram(this.glProgram);\n        if (!gl.getProgramParameter(this.glProgram, gl.LINK_STATUS)) {\n            const programLog = gl.getProgramInfoLog(this.glProgram);\n            throw new Error(`Program failed to link in '${this.name}' shader!\\n${programLog}`);\n        }\n\n        gl.deleteShader(glVertexShader);\n        gl.deleteShader(glFragmentShader);\n    }\n\n    bind(gl: WebGL2RenderingContext): void {\n        if (!this.glProgram) {\n            this.init(gl);\n        }\n\n        gl.useProgram(this.glProgram);\n    }\n\n    dispose(gl: WebGL2RenderingContext): void {\n        gl.deleteProgram(this.glProgram);\n    }\n\n    getUniformLocation(gl: WebGL2RenderingContext, name: string): WebGLUniformLocation {\n        const cachedLocation = this.uniformLocationCache.get(name);\n        if (cachedLocation !== undefined) {\n            return cachedLocation;\n        }\n\n        assert(this.glProgram !== null, `Has not initialized yet in '${this.name}' shader!`);\n        const location = gl.getUniformLocation(this.glProgram, name);\n        assert(location !== null, `Uniform '${name}' does not appear to exist!`);\n\n        this.uniformLocationCache.set(name, location);\n        return location;\n    }\n\n    setFloat1(gl: WebGL2RenderingContext, name: string, value: number): void {\n        gl.uniform1f(this.getUniformLocation(gl, name), value);\n    }\n\n    setFloat2(gl: WebGL2RenderingContext, name: string, value: Vector2): void {\n        gl.uniform2f(this.getUniformLocation(gl, name), value.x, value.y);\n    }\n\n    setInt1(gl: WebGL2RenderingContext, name: string, value: number): void {\n        gl.uniform1i(this.getUniformLocation(gl, name), value);\n    }\n\n    setIntArray(gl: WebGL2RenderingContext, name: string, value: Int32Array): void {\n        gl.uniform1iv(this.getUniformLocation(gl, name), value);\n    }\n\n    setMatrix3(gl: WebGL2RenderingContext, name: string, value: Matrix3): void {\n        gl.uniformMatrix3fv(this.getUniformLocation(gl, name), false, value.toArray(true));\n    }\n\n    private _compileGLShader(\n        gl: WebGL2RenderingContext,\n        type: number,\n        source: string\n    ): WebGLShader {\n        const glShader = gl.createShader(type);\n        const shaderTypeName = type === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\n        assert(glShader !== null, `Could not create ${shaderTypeName} shader!`);\n\n        gl.shaderSource(glShader, source);\n        gl.compileShader(glShader);\n\n        if (!gl.getShaderParameter(glShader, gl.COMPILE_STATUS)) {\n            const shaderLog = gl.getShaderInfoLog(glShader);\n            throw new Error(\n                `Failed to compile ${shaderTypeName} shader in '${this.name}' shader!\\n${shaderLog}`\n            );\n        }\n\n        return glShader;\n    }\n}\n","import { assert } from \"src/utils/misc\";\n\nexport class VertexArray {\n    glVertexArray: WebGLVertexArrayObject;\n    glIndexBuffer: WebGLBuffer | null = null;\n    glVertexBuffers: WebGLBuffer[] = [];\n\n    constructor(gl: WebGL2RenderingContext) {\n        const glVertexArray = gl.createVertexArray();\n        assert(glVertexArray !== null, \"Failed to create vertex array!\");\n        this.glVertexArray = glVertexArray;\n    }\n\n    bind(gl: WebGL2RenderingContext): void {\n        gl.bindVertexArray(this.glVertexArray);\n    }\n\n    addVertexBuffer(\n        gl: WebGL2RenderingContext,\n        vertices: Float32Array | Float64Array,\n        usage: number = WebGL2RenderingContext.STATIC_DRAW\n    ): WebGLBuffer {\n        this.bind(gl);\n        const glVertexBuffer = gl.createBuffer();\n        assert(glVertexBuffer !== null, \"Failed to create vertex buffer!\");\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, glVertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, usage);\n\n        this.glVertexBuffers.push(glVertexBuffer);\n        return glVertexBuffer;\n    }\n\n    setIndexBuffer(\n        gl: WebGL2RenderingContext,\n        indices: Uint8Array | Uint16Array | Uint32Array\n    ): WebGLBuffer {\n        this.bind(gl);\n        const glIndexBuffer = gl.createBuffer();\n        assert(glIndexBuffer !== null, \"Failed to create index buffer!\");\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, glIndexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n        this.glIndexBuffer = glIndexBuffer;\n        return glIndexBuffer;\n    }\n\n    dispose(gl: WebGL2RenderingContext): void {\n        this.glVertexBuffers.forEach((buffer) => {\n            gl.deleteBuffer(buffer);\n        });\n\n        gl.deleteBuffer(this.glIndexBuffer);\n        gl.deleteVertexArray(this.glVertexArray);\n    }\n}\n","import { Renderer } from \"./renderer\";\nimport { Shader } from \"./shader\";\nimport { VertexArray } from \"./vertex_array\";\nimport textureVertexSrc from \"./shaders/texture_vert.glsl\";\nimport textureFragmentSrc from \"./shaders/texture_frag.glsl\";\nimport { Texture } from \"./texture\";\nimport { Matrix3 } from \"src/math/matrix3\";\n\nexport abstract class AbstractBatchRenderer {\n    static readonly vertexSize = 9; // position (2) + texCoord (2) + texture index (1) + color (4)\n    static readonly maxDraws = 1000;\n    static readonly maxVertices =\n        AbstractBatchRenderer.maxDraws * 4 * AbstractBatchRenderer.vertexSize;\n    static readonly maxIndices = AbstractBatchRenderer.maxDraws * 6;\n    static readonly maxVerticesBytes =\n        AbstractBatchRenderer.maxVertices * Float32Array.BYTES_PER_ELEMENT;\n\n    renderer: Renderer;\n    vertexArray: VertexArray;\n    vertexBuffer: WebGLBuffer;\n    textureShader: Shader;\n    textureSlots: Texture[];\n    textureToSlotMap: Map<Texture, number> = new Map();\n    vertices: Float32Array = new Float32Array(AbstractBatchRenderer.maxVertices);\n    indices: Uint16Array = new Uint16Array(AbstractBatchRenderer.maxIndices);\n    verticesIndex = 0;\n    indicesCount = 0;\n    textureSlotIndex = 0;\n\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n        const gl = renderer.gl;\n\n        this.vertexArray = new VertexArray(gl);\n        this.vertexBuffer = this.vertexArray.addVertexBuffer(gl, this.vertices, gl.DYNAMIC_DRAW);\n\n        for (let i = 0, offset = 0; i < AbstractBatchRenderer.maxIndices; i += 6, offset += 4) {\n            this.indices[i] = offset;\n            this.indices[i + 1] = offset + 1;\n            this.indices[i + 2] = offset + 2;\n\n            this.indices[i + 3] = offset + 2;\n            this.indices[i + 4] = offset + 3;\n            this.indices[i + 5] = offset;\n        }\n\n        this.vertexArray.setIndexBuffer(gl, this.indices);\n\n        const stride = AbstractBatchRenderer.vertexSize * Float32Array.BYTES_PER_ELEMENT;\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\n        gl.enableVertexAttribArray(1);\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * Float32Array.BYTES_PER_ELEMENT);\n        gl.enableVertexAttribArray(2);\n        gl.vertexAttribPointer(2, 1, gl.FLOAT, false, stride, 4 * Float32Array.BYTES_PER_ELEMENT);\n        gl.enableVertexAttribArray(3);\n        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, stride, 5 * Float32Array.BYTES_PER_ELEMENT);\n\n        // TODO: abstract shader\n        this.textureShader = new Shader(textureVertexSrc, textureFragmentSrc, \"Sprite\");\n        this.textureShader.bind(gl);\n\n        const samplers = new Int32Array(renderer.maxTextureSlots).map((_, i) => i);\n        this.textureShader.setIntArray(gl, \"u_textures\", samplers);\n\n        this.textureSlots = new Array(renderer.maxTextureSlots).fill(undefined);\n    }\n\n    beginScene(viewProjection: Matrix3): void {\n        const gl = this.renderer.gl;\n        this.textureShader.bind(gl);\n        this.textureShader.setMatrix3(gl, \"u_viewProjection\", viewProjection);\n\n        this.startBatch();\n    }\n\n    endScene(): void {\n        this.flush();\n    }\n\n    startBatch(): void {\n        this.verticesIndex = 0;\n        this.indicesCount = 0;\n    }\n\n    nextBatch(): void {\n        this.flush();\n        this.startBatch();\n        this.textureSlotIndex = 0;\n    }\n\n    flush(): void {\n        if (this.indicesCount === 0 || this.verticesIndex === 0) return;\n\n        const gl = this.renderer.gl;\n\n        // set buffer data\n        const vertices =\n            this.verticesIndex === AbstractBatchRenderer.maxVertices\n                ? this.vertices\n                : this.vertices.subarray(0, this.verticesIndex);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n\n        // bind textures\n        for (let i = 0; i < this.textureSlotIndex; i++) {\n            this.textureSlots[i].bind(gl, i);\n        }\n\n        // now draw!\n        this.vertexArray.bind(gl);\n        gl.drawElements(gl.TRIANGLES, this.indicesCount, gl.UNSIGNED_SHORT, 0);\n    }\n\n    getTextureSlot(texture: Texture): number {\n        let slot = this.textureToSlotMap.get(texture);\n        if (slot === undefined) {\n            if (this.textureSlotIndex >= this.renderer.maxTextureSlots) this.nextBatch();\n\n            slot = this.textureSlotIndex;\n            this.textureSlots[this.textureSlotIndex] = texture;\n            this.textureToSlotMap.set(texture, this.textureSlotIndex);\n            this.textureSlotIndex++;\n        }\n\n        return slot;\n    }\n}\n","import { AbstractBatchRenderer } from \"src/renderer/abstract_batch_renderer\";\nimport { Application, ApplicationUpdateEvent } from \"src/core/application\";\nimport { CameraComponent } from \"src/ecs/components/camera_component\";\nimport { Entity } from \"../entity\";\nimport { SpriteComponent } from \"src/ecs/components/sprite_component\";\nimport { System } from \"../system\";\nimport { TransformComponent } from \"src/ecs/components/transform_component\";\nimport { Vector2 } from \"src/math/vector2\";\n\nexport class SpriteRenderer extends AbstractBatchRenderer {\n    // prettier-ignore\n    static vertexPositions: Float32Array = new Float32Array([\n        -0.5, -0.5,   \n         0.5, -0.5,   \n         0.5,  0.5,   \n        -0.5,  0.5,  ]);\n\n    // prettier-ignore\n    static texCoords: Float32Array = new Float32Array([\n        0.0, 0.0, \n        1.0, 0.0, \n        1.0, 1.0, \n        0.0, 1.0, \n    ]);\n\n    private _cacheVector: Vector2 = new Vector2();\n\n    drawSprite(entity: Entity): void {\n        if (this.indicesCount >= AbstractBatchRenderer.maxIndices) this.nextBatch();\n        const matrix = TransformComponent.getGlobalTransformMatrix(entity);\n        const sprite = entity.getComponent(SpriteComponent);\n\n        for (let i = 0; i < 4; i++) {\n            const index = i * 2;\n            this._cacheVector\n                .set(\n                    SpriteRenderer.vertexPositions[index] * sprite.texture.aspectRatio,\n                    SpriteRenderer.vertexPositions[index + 1]\n                )\n                .transformMatrix3(matrix);\n            this.vertices[this.verticesIndex++] = this._cacheVector.x;\n            this.vertices[this.verticesIndex++] = this._cacheVector.y;\n            this.vertices[this.verticesIndex++] = SpriteRenderer.texCoords[index];\n            this.vertices[this.verticesIndex++] = SpriteRenderer.texCoords[index + 1];\n            this.vertices[this.verticesIndex++] = this.getTextureSlot(sprite.texture);\n            this.vertices[this.verticesIndex++] = sprite.rgbaColor[0];\n            this.vertices[this.verticesIndex++] = sprite.rgbaColor[1];\n            this.vertices[this.verticesIndex++] = sprite.rgbaColor[2];\n            this.vertices[this.verticesIndex++] = sprite.rgbaColor[3];\n        }\n\n        this.indicesCount += 6;\n    }\n}\n\n/**\n * Register this system to render sprites.\n *\n * @memberof ESSEM\n */\nexport class SpriteRendererSystem extends System {\n    spriteRenderer!: SpriteRenderer;\n\n    setup(app: Application): void {\n        this.setComponents([TransformComponent, SpriteComponent]);\n        app.eventManager.addListener(ApplicationUpdateEvent, this.onUpdate.bind(this));\n        this.spriteRenderer = new SpriteRenderer(app.renderer);\n    }\n\n    onUpdate(): void {\n        const mainCamera = this.scene.getEntitesByTag(\"MainCamera\")[0];\n        if (mainCamera === undefined) return;\n\n        const viewProjection = mainCamera.getComponent(CameraComponent).getProjectionMatrix();\n        viewProjection.multiply(\n            mainCamera.getComponent(TransformComponent).transformMatrix.invert()\n        );\n\n        this.spriteRenderer.beginScene(viewProjection);\n        this.entities.forEach((entity) => {\n            this.spriteRenderer.drawSprite(entity);\n        });\n\n        this.spriteRenderer.endScene();\n    }\n}\n","/**\n * @namespace ESSEM\n */\n\nexport * from \"./core/application\";\nexport * from \"./core/audio_clip\";\nexport * from \"./core/canvas\";\nexport * from \"./core/event_manager\";\nexport * from \"./core/input_events\";\nexport * from \"./core/loader\";\n\nexport * from \"./ecs/components/camera_component\";\nexport * from \"./ecs/components/sprite_component\";\nexport * from \"./ecs/components/transform_component\";\nexport * from \"./ecs/systems/camera_system\";\nexport * from \"./ecs/systems/sprite_renderer_system\";\nexport * from \"./ecs/entity\";\nexport * from \"./ecs/scene\";\nexport * from \"./ecs/system\";\n\nexport * from \"./renderer/abstract_batch_renderer\";\nexport * from \"./renderer/renderer\";\nexport * from \"./renderer/shader\";\nexport * from \"./renderer/texture\";\nexport * from \"./renderer/vertex_array\";\n\nexport * from \"./math/common\";\nexport * from \"./math/vector2\";\nexport * from \"./math/matrix3\";\n\nexport * from \"./utils/browser\";\nexport * from \"./utils/colors\";\nexport * from \"./utils/misc\";\nexport * from \"./utils/types\";\n\n/**\n * The version of the essem.js library being used.\n *\n * @memberof ESSEM\n * @type string\n */\nexport const VERSION: string = \"$_VERSION\";\n\nif (window.__ESSEM__) {\n    throw new Error(\"essem.js is already imported!\");\n} else {\n    window.__ESSEM__ = true;\n}\n"],"names":["AssertionError","Error","[object Object]","message","super","this","name","assert","condition","mapGet","map","key","defaultClass","has","set","get","lastItemSwapRemove","array","index","lastItem","length","pop","getTypeName","type","webgl2Supported","isWebGL2Supported","undefined","gl","document","createElement","getContext","saidHello","sayHello","console","log","skipHello","hexToRGBA","hex","rgb","Float32Array","Renderer","canvasElement","alert","maxTextureSlots","getParameter","MAX_TEXTURE_IMAGE_UNITS","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","backgroundColor","hexColor","rgbColor","clearColor","Entity","id","scene","Map","_scene","component","typeName","constructor","_componentMap","active","_entityComponentAdd","componentType","_entityComponentRemove","delete","componentTypes","i","hasComponent","tag","_entityTagAdd","_tagIndexMap","_entityTagRemove","_active","_destroyed","parent","_setActive","_activeSelf","forEachChildrenRecursive","child","activeSelf","size","addTag","_parent","children","_name","func","forEachParent","forEach","destroyed","ObjectPool","objectClass","objectManager","availableObjects","reserve","Math","ceil","totalObjects","object","push","count","Scene","entityPool","entity","aquire","_setup","_destroy","release","_tagToEntities","Array","_typeNameToSystem","system","_systemIndexMap","hasAllComponents","typeNames","entities","onEntityAdd","entityIndex","approxEquals","a","b","tolerance","abs","DEG_TO_RAD","PI","toRadians","degrees","RAD_TO_DEG","toDegrees","radians","TWO_PI","Vector2","x","y","vector","out","_array","scalar","sqrt","distanceSquared","magnitudeSquared","divide","magnitude","rValue","random","cos","origin","pointX","pointY","sinC","sin","cosC","atan2","matrix","xScale","xSkew","xTrans","ySkew","yScale","yTrans","Event","EventManager","eventType","listenerFunc","eventName","eventListenersMap","event","listeners","handled","KeyPressedEvent","code","repeated","KeyReleasedEvent","KeyTypedEvent","MousePressedEvent","button","MouseReleasedEvent","MouseMovedEvent","offsetX","offsetY","MouseScrolledEvent","CanvasResizedEvent","width","height","Canvas","options","eventManager","fixedSize","_eventManager","aspectRatio","element","resizeCanvas","resizeFull","window","addEventListener","_pressedKeys","sendEvent","repeat","_pressedMouseButtons","_mousePosition","clientX","clientY","keyCode","clone","innerHeight","aspectWidth","innerWidth","AudioClip","buffer","context","_context","url","response","fetch","arrayBuffer","decodedAudio","decodeAudioData","source","createBufferSource","start","currentTime","loop","onended","playing","gain","createGain","connect","destination","value","volume","stop","play","Texture","glTexture","createTexture","bind","texParameteri","TEXTURE_2D","TEXTURE_WRAP_S","MIRRORED_REPEAT","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","init","bindTexture","deleteTexture","Promise","resolve","reject","image","Image","src","onload","texture","onerror","canvas","fillStyle","fillRect","createWhiteTexture","Loader","audioContext","_audioContext","resourceType","resourceTypeName","resourceURLs","resources","fromURL","ApplicationInitEvent","ApplicationUpdateEvent","delta","Application","AudioContext","canvasOptions","loader","renderer","setTimeout","loadAll","addListener","viewport","running","_onUpdate","requestAnimationFrame","now","performance","lastFrameTime","update","systemClasses","_systemClasses","systems","systemClass","setup","Matrix3","transpose","det","xScale1","angle","position","scale","rotation","identity","rotate","translate","left","right","bottom","top","rl","tp","CameraComponent","zoom","fixedAspectRatio","_projectionMatrix","projection","SpriteComponent","color","_hexColor","rgbaColor","TransformComponent","_position","_scale","_rotation","transformMatrix","_transformValid","_transformMatrix","transform","getComponent","add","multiplyFront","System","_systemTypeNameAdd","CameraSystem","app","setComponents","onResized","cameraComponent","setViewportSize","Shader","vertexSrc","fragmentSrc","glVertexShader","_compileGLShader","VERTEX_SHADER","glFragmentShader","FRAGMENT_SHADER","glProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","programLog","getProgramInfoLog","deleteShader","useProgram","deleteProgram","cachedLocation","uniformLocationCache","location","getUniformLocation","uniform1f","uniform2f","uniform1i","uniform1iv","uniformMatrix3fv","toArray","glShader","createShader","shaderTypeName","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderLog","getShaderInfoLog","VertexArray","glVertexArray","createVertexArray","bindVertexArray","vertices","usage","WebGL2RenderingContext","STATIC_DRAW","glVertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","glVertexBuffers","indices","glIndexBuffer","ELEMENT_ARRAY_BUFFER","deleteBuffer","deleteVertexArray","AbstractBatchRenderer","maxVertices","Uint16Array","maxIndices","vertexArray","vertexBuffer","addVertexBuffer","DYNAMIC_DRAW","offset","setIndexBuffer","stride","vertexSize","BYTES_PER_ELEMENT","enableVertexAttribArray","vertexAttribPointer","FLOAT","textureShader","samplers","Int32Array","_","setIntArray","textureSlots","fill","viewProjection","setMatrix3","startBatch","flush","verticesIndex","indicesCount","textureSlotIndex","subarray","bufferSubData","drawElements","TRIANGLES","UNSIGNED_SHORT","textureToSlotMap","nextBatch","maxDraws","SpriteRenderer","getGlobalTransformMatrix","sprite","_cacheVector","vertexPositions","transformMatrix3","texCoords","getTextureSlot","SpriteRendererSystem","onUpdate","spriteRenderer","mainCamera","getEntitesByTag","getProjectionMatrix","multiply","invert","beginScene","drawSprite","endScene","VERSION","__ESSEM__"],"mappings":"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"}